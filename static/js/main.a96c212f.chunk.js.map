{"version":3,"sources":["components/Navbar.js","pages/About.js","components/DashItem.js","components/Dashboard.js","pages/Home.js","components/Company.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","About","DashItem","name","price","Dashboard","props","border","Home","low","high","Company","App","state","companies","this","fetchStock","setInterval","company","API_Call","fetch","response","json","key","data","array","Array","push","setState","path","exact","render","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a96c212f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <ul className='navbar'>\n      <li>\n        <Link className='nav_item' to='/'>\n          Home\n        </Link>\n      </li>\n      <li>\n        <Link className='nav_item' to='/about'>\n          About\n        </Link>\n      </li>\n    </ul>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div className='aboutInfo'>\n      <h3>Stock Market Assistant</h3>\n      <h2>Version 1.0</h2>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nconst DashItem = ({ name, price }) => {\n  return (\n    <Fragment>\n      <tr>\n        <td>{name}</td>\n        <td>{price}</td>\n        <td>\n          <button>\n            <Link to={`/${name}`} className='info_btn'>\n              Info\n            </Link>\n          </button>\n        </td>\n      </tr>\n    </Fragment>\n  );\n};\n\nexport default DashItem;\n","import React from 'react';\n\nimport DashItem from './DashItem';\n\nconst Dashboard = props => {\n  return (\n    <div className='dashboard'>\n      <table border='1'>\n        <thead>\n          <tr>\n            <th>Company</th>\n            <th>Stock Price</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <DashItem {...props} />\n          <tr>\n            <td>IBM</td>\n            <td>$120</td>\n            <td>\n              <button className='info_btn'>Info</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from '../components/Dashboard';\n\nconst Home = ({ name, price, low, high }) => {\n  return (\n    <div>\n      <Dashboard name={name} price={price} low={low} high={high} />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Company = ({ name, high, low }) => {\n  return (\n    <div className='dashboard'>\n      <table border='1'>\n        <thead>\n          <tr>\n            <th>Company</th>\n            <th>High</th>\n            <th>Low</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{name}</td>\n            <td>{high}</td>\n            <td>{low}</td>\n          </tr>\n          <tr>\n            <td>IBM</td>\n            <td>$130</td>\n            <td>$100</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Company;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\nimport Home from './pages/Home';\nimport Company from './components/Company';\nclass App extends Component {\n  state = {\n    name: '',\n    price: '',\n    low: '',\n    high: ''\n  };\n\n  componentDidMount() {\n    this.fetchStock('MSFT');\n    setInterval(() => {\n      this.fetchStock('MSFT');\n    }, 60000);\n  }\n\n  companies = ['MSFT', 'IBM', ''];\n\n  // map through companies and run the api call\n\n  // componentDidMount() {\n  //   this.companies.map(company => {\n  //     this.fetchStock(company);\n  //   })\n  //   setInterval(() => {\n  //     this.fetchStock('MSFT');\n  //   }, 600000);\n  // }\n\n  async fetchStock(company) {\n    const API_KEY = '80Y08N3U8HM50P20';\n    const API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${company}&interval=1min&outputsize=compact&apikey=${API_KEY}`;\n\n    // fetch the API\n    const response = await fetch(API_Call);\n    const data = await response.json();\n    for (var key in data['Time Series (1min)']) {\n      const array = new Array();\n      array.push(key);\n      const name = data['Meta Data']['2. Symbol'];\n      const price = data['Time Series (1min)'][array[0]]['1. open'];\n      const high = data['Time Series (1min)'][array[0]]['2. high'];\n      const low = data['Time Series (1min)'][array[0]]['3. low'];\n      this.setState({ name });\n      this.setState({ price });\n      this.setState({ high });\n      this.setState({ low });\n    }\n  }\n  render() {\n    const { name, price, high, low } = this.state;\n    return (\n      <Router>\n        <div className='App'>\n          <Navbar />\n          <h1 className='header'>Stock Market</h1>\n        </div>\n        <Switch>\n          <Route\n            path='/'\n            exact\n            render={props => (\n              <Home name={name} price={price} high={high} low={low} />\n            )}\n          />\n          <Route path='/about' exact component={About} />\n          <Route\n            path='/:cpnid'\n            exact\n            render={props => (\n              <Company name={name} price={price} high={high} low={low} />\n            )}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}